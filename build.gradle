// SETUP BUILDSCRIPT ///////////////////////////////////////////////////////////

buildscript {

  repositories {
    jcenter()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    maven {
      url "${artifactory_url}/plugins-release"
      credentials {
        username artifactory_user
        password artifactory_password
      }
    }
  }

  dependencies {
    classpath 'org.xtext:xtext-gradle-plugin:1.0.5'
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
  }
  
}

task wrapper(type: Wrapper) {
		gradleVersion = '2.14'
}

// CONFIGURE ALL SUBPROJECTS ///////////////////////////////////////////////////

subprojects {
  apply plugin: 'eclipse'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'java'
  apply plugin: 'org.xtext.xtend'
  apply plugin: 'maven-publish'
  apply plugin: 'jacoco'

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion

  eclipse.project.name = rootProject.name + '-' + project.name
  tasks.eclipse.dependsOn(cleanEclipse)

  xtend { preferences = [ 'useJavaCompilerCompliance':true ] }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "${artifactory_url}/main"
      credentials {
        username artifactory_user
        password artifactory_password
      }
    }
  }

  configurations {
    quasar
  }

  dependencies {
    compile "org.eclipse.xtend:org.eclipse.xtend.lib:${xtendVersion}"
    testCompile "junit:junit:${junitVersion}"
  }

  task sourcesJar( type: Jar, dependsOn: classes ) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar( type: Jar, dependsOn: javadoc ) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }

  tasks.withType( Javadoc ) {
    if ( JavaVersion.current().isJava8Compatible() ) {
      options.addStringOption( 'Xdoclint:none', '-quiet' )
    }
  }

  test {
      testLogging {
          error {
            showStackTraces true
            exceptionFormat "full"
          }
          events "passed", "skipped", "failed", "standardOut", "standardError"
      }
  }

  task install( dependsOn: publishToMavenLocal )

  jar {
    baseName rootProject.name + '-' + project.name
  }

  jacoco {
    toolVersion = '0.7.6.201602180812'
  }

  jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports.html.enabled true
  }

  publishing {
    publications {
      mavenJava( MavenPublication ) {
        artifactId rootProject.name + '-' + project.name
        from components.java
        artifact sourcesJar
        artifact javadocJar
        pom.withXml {
          asNode().dependencies.'*'.each() {
            it.scope*.value = 'compile'
          }
        }
      }
    }
    repositories {
      maven {
        url "${artifactory_url}/main-local"
        credentials {
          username artifactory_user
          password artifactory_password
        }
      }
    }
  }
}

project('annotations') {
  dependencies {
    compile 'com.kimengi.util:xtend-tools-core:latest.release'
  }
}

project('core') {
  dependencies {
    compile project(':annotations')
    testCompile 'com.kimengi.util:xtend-tools-test:latest.release'
  }
}

project('event') {
  dependencies {
    compile project(':core')
  }
}

project('rx') {
  dependencies {
    compile project(':core')
    compile 'io.reactivex:rxjava:1.1.3'
    testCompile 'com.kimengi.util:xtend-tools-test:latest.release'
  }
}

project('collections') {
    dependencies {
        compile project(':core')
        compile project(':event')
        testCompile 'com.kimengi.util:xtend-tools-test:latest.release'
    }
}
