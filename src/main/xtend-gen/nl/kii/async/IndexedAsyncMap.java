package nl.kii.async;

import java.util.List;
import java.util.Map;
import nl.kii.async.AsyncMap;
import nl.kii.promise.Promise;
import nl.kii.promise.Task;

/**
 * An AsyncMap that lets you query for results using an index.
 * It has Strings as keys and allows for adding of values,
 * using autogenerated keys.
 */
@SuppressWarnings("all")
public interface IndexedAsyncMap<V extends Object> extends AsyncMap<String, V> {
  /**
   * Perform a query and promise a map of keys and values.
   * All parameters are optional and may be null.
   */
  public abstract Promise<Map<String, V>> query(final String index, final String query, final String startKey, final String endKey, final Integer skip, final Integer limit);
  
  /**
   * Perform a query and promise a list of keys whose values match the query.
   * All parameters are optional and may be null.
   */
  public abstract Promise<List<String>> queryKeys(final String index, final String query, final String startKey, final String endKey, final Integer skip, final Integer limit);
  
  public abstract Promise<String> add(final V value);
  
  public abstract Promise<String> add(final String index, final V value);
  
  public abstract Task put(final String index, final String key, final V value);
  
  public abstract Promise<V> get(final String index, final String key);
  
  public abstract Promise<Map<String, V>> get(final String index, final List<String> keys);
  
  public abstract Task remove(final String index, final String key);
  
  /**
   * Generate a new key for the given index.
   */
  public abstract Promise<String> newKey(final String index);
}
