package nl.kii.async

import java.util.Map
import nl.kii.promise.Promise
import nl.kii.promise.Task
import java.util.List

/**
 * An AsyncMap that lets you query for results using an index.
 * It has Strings as keys and allows for adding of values,
 * using autogenerated keys.
 */
interface IndexedAsyncMap<V> extends AsyncMap<String, V> {

	/** Perform a query and promise a map of keys and values. 
	 * All parameters are optional and may be null.
	 */
	def Promise<Map<String, V>> query(String index, String query, String startKey, String endKey, Integer skip, Integer limit)

	/** 
	 * Perform a query and promise a list of keys whose values match the query. 
	 * All parameters are optional and may be null.
	 */
	def Promise<List<String>> queryKeys(String index, String query, String startKey, String endKey, Integer skip, Integer limit)

	def Promise<String> add(V value)

	def Promise<String> add(String index, V value)
	
	def Task put(String index, String key, V value)
	
	def Promise<V> get(String index, String key)
	
	def Promise<Map<String, V>> get(String index, List<String> keys)
	
	def Task remove(String index, String key)
	
	/** Generate a new key for the given index. */
	def Promise<String> newKey(String index)

}
