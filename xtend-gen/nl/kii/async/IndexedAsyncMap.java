package nl.kii.async;

import nl.kii.async.AsyncMap;
import nl.kii.promise.Promise;
import nl.kii.promise.Task;

/**
 * An AsyncMap that lets you query for results using an index.
 * It has Strings as keys and allows for adding of values,
 * using autogenerated keys.
 */
public interface IndexedAsyncMap<V extends java.lang.Object> /* extends AsyncMap<String, V>  */{
  /**
   * Perform a query and promise a map of keys and values.
   * All parameters are optional and may be null.
   */
  public abstract /* Promise<Map<String, V>> */Object query(final /* String */Object index, final /* String */Object query, final /* String */Object startKey, final /* String */Object endKey, final /* Integer */Object skip, final /* Integer */Object limit);
  
  /**
   * Perform a query and promise a list of keys whose values match the query.
   * All parameters are optional and may be null.
   */
  public abstract /* Promise<List<String>> */Object queryKeys(final /* String */Object index, final /* String */Object query, final /* String */Object startKey, final /* String */Object endKey, final /* Integer */Object skip, final /* Integer */Object limit);
  
  public abstract /* Promise<String> */Object add(final V value);
  
  public abstract /* Promise<String> */Object add(final /* String */Object index, final V value);
  
  public abstract Task put(final /* String */Object index, final /* String */Object key, final V value);
  
  public abstract Promise<V> get(final /* String */Object index, final /* String */Object key);
  
  public abstract /* Promise<Map<String, V>> */Object get(final /* String */Object index, final /* List<String> */Object keys);
  
  public abstract Task remove(final /* String */Object index, final /* String */Object key);
  
  /**
   * Generate a new key for the given index.
   */
  public abstract /* Promise<String> */Object newKey(final /* String */Object index);
}
